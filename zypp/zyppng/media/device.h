/*---------------------------------------------------------------------\
|                          ____ _   __ __ ___                          |
|                         |__  / \ / / . \ . \                         |
|                           / / \ V /|  _/  _/                         |
|                          / /__ | | | | | |                           |
|                         /_____||_| |_| |_|                           |
|                                                                      |
----------------------------------------------------------------------/
*
* This file contains private API, this might break at any time between releases.
* You have been warned!
*
*/
#ifndef ZYPPNG_MEDIA_DEVICE_H_INCLUDED
#define ZYPPNG_MEDIA_DEVICE_H_INCLUDED

#include <zypp-core/zyppng/base/Base>
#include <zypp-core/zyppng/base/Signals>
#include <unordered_map>
#include <string>
#include <any>

namespace zyppng {

  class DeviceHandler;
  class DeviceType;

  // The device contains:
  // - device type, this is the same as the type name of the registered Device Type
  // - device name ( device specific )
  // - min/maj number
  // - flag if the device instance can be shared
  // - a compare func
  // - a list of weak references to the currently mounted handlers
  class Device : public Base
  {
  public:
    using Ptr = std::shared_ptr<Device>;

    Device ( const std::string &type,  const std::string &name,
      unsigned int       maj=0, unsigned int       min=0 );

    bool equals( const Device &other );
    bool isAttached ( ) const;

    uint addMount ( std::shared_ptr<DeviceHandler> hdl );
    void delMount ( uint mountId );

    std::vector< std::weak_ptr<DeviceHandler> > activeHandlers() const;

    const std::unordered_map<std::string, std::any> &properties () const;
    std::unordered_map<std::string, std::any> &properties ();

    const std::string &type() const;
    const std::string &name() const;
    unsigned int maj_nr() const;
    unsigned int min_nr() const;

    /**
     * Return device properties as string for debuging purposes.
     */
    std::string asString() const;


    SignalProxy<void()> sigUnmounted ();

    friend class DeviceHandler;
    friend class DeviceType;
  protected:
    /*!
     * Signal that is emitted right before the device is forcefully ejected
     * All DeviceHandlers must connect to it, and immediately cancel all operations
     * and release all references when receiving it.
     */
    SignalProxy<void()> sigAboutToEject ();
    void prepareEject ();

  private:
    std::unordered_map< uint, std::weak_ptr<DeviceHandler> > _mountingHandler;
    std::unordered_map<std::string, std::any> _properties; //< a list of custom properties generated by the handlers
    uint _nextMountId      = 0;  //! < The next mount ID to use
    std::string  _type;    //!< A media handler specific source type.
    std::string  _name;    //!< A media handler specific source name.
    unsigned int _maj_nr    = 0;  //!< A major number if source is a device.
    unsigned int _min_nr    = 0;  //!< A minor number if source is a device.

    Signal<void()> _sigUnmounted; //!< Emitted when the last DeviceHandler releases its reference to the Device
    Signal<void()> _sigAboutToEject; //<! All objects that hold a reference to the device have to connect to this event
  };

  /** \relates Device Stream output */
  inline std::ostream & operator<<( std::ostream & str, const Device & obj )
  { return str << obj.asString(); }


}



#endif
